ggplot(df) + geom_text(aes(x = Above_Median_SPC, y=State, label=Spending_Per_Child),size=3)+xlab("Above Median Spending Per Child")+geom_tile(aes(x=Above_Median_SPC, y=State,fill=Elementary_Enrollment_Average), alpha=0.50)
ggplot(df5) +geom_boxplot(aes(x= df5$Above_Median_SPC,y = df5$Spending_Per_Child))
runApp()
runApp()
dataframee <- query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT *
FROM Pupil_Per_Spending join USA_All_States_Income on (Pupil_Per_Spending.`Abbreviation:`=USA_All_States_Income.State)"
)
df <- dataframee
names(df)
str(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("2014 PPCS", "Income", "State", "Abbreviation:", "Race")
dimensions <- setdiff(names(df), measures)
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
str(df)
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
na2emptyString <- function (x) {
x[is.na(x)] <- ""
return(x)
}
if( length(dimensions) > 0) {
for(d in dimensions) {
# Change NA to the empty string.
df[d] <- data.frame(lapply(df[d], na2emptyString))
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
na2zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.
if( length(measures) > 1) {
for(m in measures) {
print(m)
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
df[m] <- data.frame(lapply(df[m], na2zero))
df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))
# This is needed to turn measures back to numeric because gsub turns them into strings.
}
}
incomestuff <- df
View(incomestuff)
dimensions <- c("State", "Abbreviation:", "Race")
measures <- setdiff(names(df), dimensions)
dataframee <- query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT *
FROM Pupil_Per_Spending join USA_All_States_Income on (Pupil_Per_Spending.`Abbreviation:`=USA_All_States_Income.State)"
)
df <- dataframee
names(df)
str(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.
dimensions <- c("State", "Abbreviation:", "Race")
measures <- setdiff(names(df), dimensions)
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
str(df)
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
na2emptyString <- function (x) {
x[is.na(x)] <- ""
return(x)
}
if( length(dimensions) > 0) {
for(d in dimensions) {
# Change NA to the empty string.
df[d] <- data.frame(lapply(df[d], na2emptyString))
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
na2zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.
if( length(measures) > 1) {
for(m in measures) {
print(m)
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
df[m] <- data.frame(lapply(df[m], na2zero))
df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))
# This is needed to turn measures back to numeric because gsub turns them into strings.
}
}
incomestuff <- df
str(elementaryspending)
View(incomestuff)
require(dplyr)
require(ggplot2)
require(data.world)
require(scales)
df1 <- query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT *
FROM Pupil_Per_Spending join USA_All_States_Income on (Pupil_Per_Spending.`Abbreviation:`=USA_All_States_Income.State)"
)
names(df1)
df <- df1
names(df)
str(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("2014 PPCS", "Income", "State", "Abbreviation:", "Race")
dimensions <- setdiff(names(df), measures)
dimensions
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
str(df)
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
na2emptyString <- function (x) {
x[is.na(x)] <- ""
return(x)
}
if( length(dimensions) > 0) {
for(d in dimensions) {
# Change NA to the empty string.
df[d] <- data.frame(lapply(df[d], na2emptyString))
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
na2zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.
if( length(dimensions) > 1) {
for(m in dimensions) {
print(m)
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
df[m] <- data.frame(lapply(df[m], na2zero))
df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))
# This is needed to turn measures back to numeric because gsub turns them into strings.
}
}
str(df)
p <- ggplot(df1, aes(x= State, y=`Income`))+geom_boxplot()+scale_y_continuous(name="Income", label=dollar)+ geom_point(aes(x=State, y=`2014 PPCS`, color="red"))
print(p)
require(dplyr)
require(ggplot2)
require(data.world)
source("www/R_ETL.R")
df1 <- data.frame(education)
df1$pps_abv_avg <- (df1$`X2014.PPCS` > mean(df1$`X2014.PPCS`))
df1$bach_abv_avg <- (df1$Bachelors > 500000)
df1$kpi_bach_ratio <- (df1$Bachelors / df1$`Current.Spending`)
highbardf <- dplyr::filter(df1, pps_abv_avg == TRUE)
lowbardf <- dplyr::filter(df1, pps_abv_avg == FALSE)
elementaryspending$State_1 <-NULL #removes duplicated states
elementaryspending <-elementaryspending[-1,] #removes the united states section
df = data.frame(elementaryspending)
df$Spending_Per_Child <- (df$`Total.Spending..in.thousands`*1000/df$`Elementary.secondary.enrollment`)
df$Above_Median_SPC <- df$Spending_Per_Child > median(df$Spending_Per_Child)
df$Elementary_Enrollment_Average <- ifelse (df$Elementary.secondary.enrollment/df$State.population..in.thousands.<=mean(df$Elementary.secondary.enrollment/df$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
df5 = data.frame(elementaryspending)
df5$Spending_Per_Child <- (df5$Total.Spending..in.thousands.*1000/df5$Elementary.secondary.enrollment)
df5$Above_Median_SPC <- df5$Spending_Per_Child > median(df5$Spending_Per_Child)
df5$Elementary_Enrollment_Average <- ifelse (df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.<=mean(df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
ggplot(highbardf, aes(x=State, y=X2014.PPCS, fill=bach_abv_avg))+
geom_bar(stat='identity') +
ylab('Per Child Spending') +
coord_flip() +
ggtitle('Bachcelors Performance - High Spending States') +
geom_text(aes(label=Bachelors))
ggplot(lowbardf, aes(x=State, y=X2014.PPCS, fill=bach_abv_avg)) +
geom_bar(stat='identity') +
ylab('Per Child Spending') +
coord_flip() +
ggtitle('Bachelors Performance - Low Spending States') +
geom_text(aes(label=Bachelors))
ggplot(df1) + geom_histogram(aes(x = `X2014.PPCS`, fill = I('dodgerblue4'), col=I('red'))) +
xlab('Per Child Spending') +
ylab('Bin of States') +
ggtitle('Per Pupil Spending Range')
ggplot(df1, aes(x=State,  y=kpi_bach_ratio, fill = kpi_bach_ratio)) +
geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+
ylab('Bachelor Attainment to Spending Ratio') +
ggtitle('KPI Bachelor Ratio Performance by State')
ggplot(incomestuff, aes(x= State, y=`Income`))+geom_boxplot()+scale_y_continuous(name="Income", label=dollar)+ geom_point(aes(x=State, y=`2014 PPCS`, color="red"))
runApp()
source('../01 Data/connect_to_rest_server.R')
setwd("~/DataVisualization/Final/00 Doc")
source('../01 Data/connect_to_rest_server.R')
source('connect_to_rest_server.R')
source('../01 Data/R_ETL.R')
source('R_ETL.R')
dataframee <- query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT *
FROM Pupil_Per_Spending join USA_All_States_Income on (Pupil_Per_Spending.`Abbreviation:`=USA_All_States_Income.State)"
)
df <- dataframee
names(df)
str(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.
dimensions <- c("Geographic area", "State", "Abbreviation:", "Race")
measures <- setdiff(names(df), dimensions)
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
str(df)
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
na2emptyString <- function (x) {
x[is.na(x)] <- ""
return(x)
}
if( length(dimensions) > 0) {
for(d in dimensions) {
# Change NA to the empty string.
df[d] <- data.frame(lapply(df[d], na2emptyString))
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
na2zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.
if( length(measures) > 1) {
for(m in measures) {
print(m)
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
df[m] <- data.frame(lapply(df[m], na2zero))
df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))
# This is needed to turn measures back to numeric because gsub turns them into strings.
}
}
incomestuff <- df
ggplot(incomestuff, aes(x=Income, y=`2014 PPCS`, labels(State))) + geom_point(shape=1) + geom_smooth(method=lm)
require(scales)
ggplot(incomestuff, aes(x=Income, y=`2014 PPCS`)) + geom_point(shape=1) + geom_smooth(method=lm)+ scale_x_continuous(name="Income", label=dollar)+scale_y_continuous(name="2014 PPCS", label=dollar)
shiny::runApp('~/DataVisualization/Final/02 Shiny')
ggplot(incomestuff, aes(x=sum(Income), y=`2014 PPCS`)) + geom_point(shape=1) + geom_smooth(method=lm)+ scale_x_continuous(name="Income", label=dollar)+scale_y_continuous(name="2014 PPCS", label=dollar)
joiner <-  query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT State, Income, Race, sum(USA_All_States_Income.Income) as sum_income
FROM USA_All_States_Income group by USA_All_States_Income.State order by State")
dataframe <- query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT *
FROM Pupil_Per_Spending join USA_All_States_Income on (Pupil_Per_Spending.`Abbreviation:`=USA_All_States_Income.State)"
)
joiner <-  query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT State as Region, Income, Race, sum(USA_All_States_Income.Income) as sum_income
FROM USA_All_States_Income group by USA_All_States_Income.State order by State")
dataframee <- merge(x=dataframe, y=joiner, by=c("State", "Region"))
dataframee <- merge(x=dataframe, y=joiner, by.x=c("State", "Region"))
joiner <-  query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT State, Income, Race, sum(USA_All_States_Income.Income) as sum_income
FROM USA_All_States_Income group by USA_All_States_Income.State order by State")
dataframee <- merge(x=dataframe, y=joiner, by="State")
View(dataframee)
df <- dataframee
names(df)
str(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.
dimensions <- c("Geographic area", "State", "Abbreviation:", "Race")
measures <- setdiff(names(df), dimensions)
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
str(df)
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
na2emptyString <- function (x) {
x[is.na(x)] <- ""
return(x)
}
if( length(dimensions) > 0) {
for(d in dimensions) {
# Change NA to the empty string.
df[d] <- data.frame(lapply(df[d], na2emptyString))
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
na2zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.
if( length(measures) > 1) {
for(m in measures) {
print(m)
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
df[m] <- data.frame(lapply(df[m], na2zero))
df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))
# This is needed to turn measures back to numeric because gsub turns them into strings.
}
}
incomestuff <- df
View(incomestuff)
runApp('~/DataVisualization/Final/02 Shiny')
require(dplyr)
require(ggplot2)
require(data.world)
require(scales)
source("www/R_ETL.R")
df1 <- data.frame(education)
df1$pps_abv_avg <- (df1$`X2014.PPCS` > mean(df1$`X2014.PPCS`))
df1$bach_abv_avg <- (df1$Bachelors > 500000)
df1$kpi_bach_ratio <- (df1$Bachelors / df1$`Current.Spending`)
highbardf <- dplyr::filter(df1, pps_abv_avg == TRUE)
lowbardf <- dplyr::filter(df1, pps_abv_avg == FALSE)
elementaryspending$State_1 <-NULL #removes duplicated states
elementaryspending <-elementaryspending[-1,] #removes the united states section
df = data.frame(elementaryspending)
df$Spending_Per_Child <- (df$`Total.Spending..in.thousands`*1000/df$`Elementary.secondary.enrollment`)
df$Above_Median_SPC <- df$Spending_Per_Child > median(df$Spending_Per_Child)
df$Elementary_Enrollment_Average <- ifelse (df$Elementary.secondary.enrollment/df$State.population..in.thousands.<=mean(df$Elementary.secondary.enrollment/df$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
df5 = data.frame(elementaryspending)
df5$Spending_Per_Child <- (df5$Total.Spending..in.thousands.*1000/df5$Elementary.secondary.enrollment)
df5$Above_Median_SPC <- df5$Spending_Per_Child > median(df5$Spending_Per_Child)
df5$Elementary_Enrollment_Average <- ifelse (df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.<=mean(df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollm
require(dplyr)
require(ggplot2)
require(data.world)
require(scales)
source("www/R_ETL.R")
df1 <- data.frame(education)
df1$pps_abv_avg <- (df1$`X2014.PPCS` > mean(df1$`X2014.PPCS`))
df1$bach_abv_avg <- (df1$Bachelors > 500000)
df1$kpi_bach_ratio <- (df1$Bachelors / df1$`Current.Spending`)
highbardf <- dplyr::filter(df1, pps_abv_avg == TRUE)
lowbardf <- dplyr::filter(df1, pps_abv_avg == FALSE)
elementaryspending$State_1 <-NULL #removes duplicated states
elementaryspending <-elementaryspending[-1,] #removes the united states section
df = data.frame(elementaryspending)
df$Spending_Per_Child <- (df$`Total.Spending..in.thousands`*1000/df$`Elementary.secondary.enrollment`)
df$Above_Median_SPC <- df$Spending_Per_Child > median(df$Spending_Per_Child)
df$Elementary_Enrollment_Average <- ifelse (df$Elementary.secondary.enrollment/df$State.population..in.thousands.<=mean(df$Elementary.secondary.enrollment/df$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
df5 = data.frame(elementaryspending)
df5$Spending_Per_Child <- (df5$Total.Spending..in.thousands.*1000/df5$Elementary.secondary.enrollment)
df5$Above_Median_SPC <- df5$Spending_Per_Child > median(df5$Spending_Per_Child)
df5$Elementary_Enrollment_Average <- ifelse (df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.<=mean(df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
setwd("~/DataVisualization/Final/02 Shiny")
runApp()
require(dplyr)
require(ggplot2)
require(data.world)
require(scales)
source("www/R_ETL.R")
df1 <- data.frame(education)
df1$pps_abv_avg <- (df1$`X2014.PPCS` > mean(df1$`X2014.PPCS`))
df1$bach_abv_avg <- (df1$Bachelors > 500000)
df1$kpi_bach_ratio <- (df1$Bachelors / df1$`Current.Spending`)
highbardf <- dplyr::filter(df1, pps_abv_avg == TRUE)
lowbardf <- dplyr::filter(df1, pps_abv_avg == FALSE)
elementaryspending$State_1 <-NULL #removes duplicated states
elementaryspending <-elementaryspending[-1,] #removes the united states section
df = data.frame(elementaryspending)
df$Spending_Per_Child <- (df$`Total.Spending..in.thousands`*1000/df$`Elementary.secondary.enrollment`)
df$Above_Median_SPC <- df$Spending_Per_Child > median(df$Spending_Per_Child)
df$Elementary_Enrollment_Average <- ifelse (df$Elementary.secondary.enrollment/df$State.population..in.thousands.<=mean(df$Elementary.secondary.enrollment/df$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
df5 = data.frame(elementaryspending)
df5$Spending_Per_Child <- (df5$Total.Spending..in.thousands.*1000/df5$Elementary.secondary.enrollment)
df5$Above_Median_SPC <- df5$Spending_Per_Child > median(df5$Spending_Per_Child)
df5$Elementary_Enrollment_Average <- ifelse (df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.<=mean(df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
incomestuff <- df
require(dplyr)
require(ggplot2)
require(data.world)
require(scales)
source("www/R_ETL.R")
df1 <- data.frame(education)
df1$pps_abv_avg <- (df1$`X2014.PPCS` > mean(df1$`X2014.PPCS`))
df1$bach_abv_avg <- (df1$Bachelors > 500000)
df1$kpi_bach_ratio <- (df1$Bachelors / df1$`Current.Spending`)
highbardf <- dplyr::filter(df1, pps_abv_avg == TRUE)
lowbardf <- dplyr::filter(df1, pps_abv_avg == FALSE)
elementaryspending$State_1 <-NULL #removes duplicated states
elementaryspending <-elementaryspending[-1,] #removes the united states section
df = data.frame(elementaryspending)
df$Spending_Per_Child <- (df$`Total.Spending..in.thousands`*1000/df$`Elementary.secondary.enrollment`)
df$Above_Median_SPC <- df$Spending_Per_Child > median(df$Spending_Per_Child)
df$Elementary_Enrollment_Average <- ifelse (df$Elementary.secondary.enrollment/df$State.population..in.thousands.<=mean(df$Elementary.secondary.enrollment/df$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
df5 = data.frame(elementaryspending)
df5$Spending_Per_Child <- (df5$Total.Spending..in.thousands.*1000/df5$Elementary.secondary.enrollment)
df5$Above_Median_SPC <- df5$Spending_Per_Child > median(df5$Spending_Per_Child)
df5$Elementary_Enrollment_Average <- ifelse (df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.<=mean(df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
require(data.world)
source('~/DataVisualization/Final/02 Shiny/www/R_ETL.R')
source('~/DataVisualization/Final/02 Shiny/www/R_ETL.R')
source('~/DataVisualization/Final/02 Shiny/www/R_ETL.R')
dataframe <- query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT *
FROM Pupil_Per_Spending join USA_All_States_Income on (Pupil_Per_Spending.`Abbreviation:`=USA_All_States_Income.State)"
)
joiner <-  query(
data.world(propsfile = "www/.data.world"),
dataset="chriscrider/s-17-edv-project-3", type="sql",
query = "SELECT State, Income, Race, sum(USA_All_States_Income.Income) as sum_income
FROM USA_All_States_Income group by USA_All_States_Income.State order by State")
dataframee <- merge(x=dataframe, y=joiner, by="State")
incomestuff <- dataframee
names(incomestuff)
str(incomestuff) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.
dimensions <- c("Geographic area", "State", "Abbreviation:", "Race")
measures <- setdiff(names(incomestuff), dimensions)
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(incomestuff)) {
incomestuff[n] <- data.frame(lapply(incomestuff[n], gsub, pattern="[^ -~]",replacement= ""))
}
str(incomestuff)
require(dplyr)
require(ggplot2)
require(data.world)
require(scales)
source("www/R_ETL.R")
df1 <- data.frame(education)
df1$pps_abv_avg <- (df1$`X2014.PPCS` > mean(df1$`X2014.PPCS`))
df1$bach_abv_avg <- (df1$Bachelors > 500000)
df1$kpi_bach_ratio <- (df1$Bachelors / df1$`Current.Spending`)
highbardf <- dplyr::filter(df1, pps_abv_avg == TRUE)
lowbardf <- dplyr::filter(df1, pps_abv_avg == FALSE)
elementaryspending$State_1 <-NULL #removes duplicated states
elementaryspending <-elementaryspending[-1,] #removes the united states section
df = data.frame(elementaryspending)
df$Spending_Per_Child <- (df$`Total.Spending..in.thousands`*1000/df$`Elementary.secondary.enrollment`)
df$Above_Median_SPC <- df$Spending_Per_Child > median(df$Spending_Per_Child)
df$Elementary_Enrollment_Average <- ifelse (df$Elementary.secondary.enrollment/df$State.population..in.thousands.<=mean(df$Elementary.secondary.enrollment/df$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
df5 = data.frame(elementaryspending)
df5$Spending_Per_Child <- (df5$Total.Spending..in.thousands.*1000/df5$Elementary.secondary.enrollment)
df5$Above_Median_SPC <- df5$Spending_Per_Child > median(df5$Spending_Per_Child)
df5$Elementary_Enrollment_Average <- ifelse (df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.<=mean(df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.),"Below Average Enrollment per State Population","Above Average Enrollment per State Population")
runApp()
View(incomestuff)
source('~/DataVisualization/Final/02 Shiny/www/R_ETL.R')
warnings()
source('~/DataVisualization/Final/02 Shiny/www/R_ETL.R')
p <- ggplot(incomestuff, aes(x=sum_income, y=`2014 PPCS`)) + geom_point(shape=1) + geom_smooth(method=lm)+ scale_x_continuous(name="Income", label=dollar)+scale_y_continuous(name="2014 PPCS", label=dollar)
print (p)
p <- ggplot(incomestuff, aes(x=Income.x, y=`2014 PPCS`)) + geom_point(shape=1) + geom_smooth(method=lm)+ scale_x_continuous(name="Income", label=dollar)+scale_y_continuous(name="2014 PPCS", label=dollar)
print (p)
source('~/DataVisualization/Final/02 Shiny/www/R_ETL.R')
source('~/DataVisualization/Final/02 Shiny/www/R_ETL.R')
ggplot(incomestuff, aes(x=Income, y=`2014 PPCS`)) + geom_point(shape=1) + geom_smooth(method=lm)+ scale_x_continuous(name="Income", label=dollar)+scale_y_continuous(name="2014 PPCS", label=dollar)
runApp()
runApp()
runApp()
setwd("~/DataVisualization/Final/00 Doc")
shiny::runApp('02 Shiny')
setwd("~/DataVisualization/Final/02 Shiny")
setwd("~/DataVisualization/Final/02 Shiny")
source('connect_to_rest_server.R')
source('R_ETL.R')
setwd("~/DataVisualization/Final/02 Shiny")
runApp()
runApp()
runApp()
