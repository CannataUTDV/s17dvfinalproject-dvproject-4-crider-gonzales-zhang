{
    "collab_server" : "",
    "contents" : "---\ntitle: \"<center><b>Economic Factors and Education</b></center>\"\nauthor: \"<center><b>Chris Crider, Ding Zhang, Isaac Gonzalez</b></center>\"\noutput:\n  html_document:\n    toc: yes\n  html_notebook:\n    toc: yes\n  pdf_document:\n    toc: yes\n---\n<center>![usa](../03 Visualizations/Map_of_USA.png)</center>\n\n#**Introduction**\nThe dataset we found allows us to distill and analyze key economic indicators from the United States during the years 2005 through 2016. A few of our findings are demonstrated below.\n\n#**R Configuration**\nBelow we display our sessionInfo() and the packages we've required.\n\n```{r sessionInfo}\nsessionInfo(package=NULL)\nrequire(\"jsonlite\")\nrequire(\"RCurl\")\nrequire(\"ggplot2\")\nrequire(\"dplyr\")\n```\n\n#**The Data**\n*Disclaimer: The visualizations in this section were created using Tableau 10. The R code that is featured will recreate the visuals that were rendered in Tableau.*\n\n\n\n```{r }\nsource('connect_to_rest_server.R')\n\n```\n\n#*ETL Script*\nIn the file sourced below, we ran all of our data through an ETL to clean it up and make sure there weren't any issues with the dataframes we would eventually use in our example. \n\n```{r eval=FALSE}\nrequire(dplyr)\nrequire(data.world)\n#-----------------------FILE ONE------------------------------------------\n\ndf1 <- query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"chriscrider/s-17-edv-project-3\", type=\"sql\",\n  query = \"SELECT * FROM ElementarySpending join `acs-2015-5-e-education-QueryResult` \n  on (ElementarySpending.State = `acs-2015-5-e-education-QueryResult`.AreaName)\"\n) \n\n\ndf <- df1\nnames(df)\nstr(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.\n\n\ndimensions <- c(\"State\", \"AreaName\")\n\nmeasures <-  setdiff(names(df), dimensions)\n\n\n# Get rid of special characters in each column.\n# Google ASCII Table to understand the following:\nfor(n in names(df)) {\n  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n}\n\nstr(df)\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\nna2emptyString <- function (x) {\n  x[is.na(x)] <- \"\"\n  return(x)\n}\nif( length(dimensions) > 0) {\n  for(d in dimensions) {\n    # Change NA to the empty string.\n    df[d] <- data.frame(lapply(df[d], na2emptyString))\n    # Get rid of \" and ' in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n    # Change & to and in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n    # Change : to ; in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n  }\n}\n\nna2zero <- function (x) {\n  x[is.na(x)] <- 0\n  return(x)\n}\n# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.\nif( length(measures) > 1) {\n  for(m in measures) {\n    print(m)\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n    df[m] <- data.frame(lapply(df[m], na2zero))\n    df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))\n # This is needed to turn measures back to numeric because gsub turns them into strings.\n  }\n}\n\neducation <- df\n\nstr(education)\n\n\n#-----------------------FILE TWO----------------------------------------\n\n\ndf2 <- query(\n  data.world(propsfile =\"www/.data.world\"),\n  dataset=\"chriscrider/s-17-dv-project-5/\", type=\"sql\",\n  query = \"SELECT * FROM `SchoolSpending.csv/SchoolSpending` as elementaryspending join `PopulationandElementaryEnrollment` as population on(`SchoolSpending`.State = `PopulationandElementaryEnrollment` .State)\")\n\n\ndf <- df2\nnames(df)\nstr(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.\n\n\ndimensions <- c(\"State\", \"State_1\")\n\nmeasures <-  setdiff(names(df), dimensions)\n\n\n# Get rid of special characters in each column.\n# Google ASCII Table to understand the following:\nfor(n in names(df)) {\n  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n}\n\nstr(df)\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\nna2emptyString <- function (x) {\n  x[is.na(x)] <- \"\"\n  return(x)\n}\nif( length(dimensions) > 0) {\n  for(d in dimensions) {\n    # Change NA to the empty string.\n    df[d] <- data.frame(lapply(df[d], na2emptyString))\n    # Get rid of \" and ' in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n    # Change & to and in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n    # Change : to ; in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n  }\n}\n\nna2zero <- function (x) {\n  x[is.na(x)] <- 0\n  return(x)\n}\n# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.\nif( length(measures) > 1) {\n  for(m in measures) {\n    print(m)\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n    df[m] <- data.frame(lapply(df[m], na2zero))\n    df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))\n    # This is needed to turn measures back to numeric because gsub turns them into strings.\n  }\n}\n\nelementaryspending <- df\n\nstr(elementaryspending)\n#-----------------------FILE THREE----------------------------------------\n\n\ndataframee <- query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"chriscrider/s-17-edv-project-3\", type=\"sql\",\n  query = \"SELECT *\n  FROM Pupil_Per_Spending join USA_All_States_Income on (Pupil_Per_Spending.`Abbreviation:`=USA_All_States_Income.State)\"\n  \n) \n\n\ndf <- dataframee\nnames(df)\nstr(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.\n\ndimensions <- c(\"Geographic area\", \"State\", \"Abbreviation:\", \"Race\")\n\nmeasures <- setdiff(names(df), dimensions)\n\n\n\n# Get rid of special characters in each column.\n# Google ASCII Table to understand the following:\nfor(n in names(df)) {\n  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n}\n\nstr(df)\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\nna2emptyString <- function (x) {\n  x[is.na(x)] <- \"\"\n  return(x)\n}\nif( length(dimensions) > 0) {\n  for(d in dimensions) {\n    # Change NA to the empty string.\n    df[d] <- data.frame(lapply(df[d], na2emptyString))\n    # Get rid of \" and ' in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n    # Change & to and in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n    # Change : to ; in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n  }\n}\n\nna2zero <- function (x) {\n  x[is.na(x)] <- 0\n  return(x)\n}\n# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.\nif( length(measures) > 1) {\n  for(m in measures) {\n    print(m)\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n    df[m] <- data.frame(lapply(df[m], na2zero))\n    df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))\n    # This is needed to turn measures back to numeric because gsub turns them into strings.\n  }\n}\n\nincomestuff <- df\n\n\n\n\n```\n```{r }\nsource('R_ETL.R')\n```\n\nWe pulled our data from data.world using the ETL file and stored them as variables that we will use in our examples. The data involves 2015 Census data on race, income and education breakdown by state and data on how states spend money on education. We will explain further as we go through our examples below. \n\n#**Shiny Examples** \n\n\nThese following bar graphs show per pupil spending by state and are separated and colored by whether or not they have a relatively high rate of bachelor degree attainment amon their residents. The aim of this visualization is to point out a possible correlation or lack thereof between elementary investment by the state and continuing education of its residents.\n```{r eval=FALSE}\n    ggplot(highbardf, aes(x=State, y=X2014.PPCS, fill=bach_abv_avg))+ \n\n      geom_bar(stat='identity') +\n      ylab('Per Child Spending') +\n      coord_flip() +\n      ggtitle('Bachcelors Performance - High Spending States') +\n      geom_text(aes(label=Bachelors))\n\n    ggplot(lowbardf, aes(x=State, y=X2014.PPCS, fill=bach_abv_avg)) + \n      geom_bar(stat='identity') +\n      ylab('Per Child Spending') +\n      coord_flip() +\n      ggtitle('Bachelors Performance - Low Spending States') + \n      geom_text(aes(label=Bachelors))\n```\n\n<center>![chris1](../03 Visualizations/Elementary_Spending_and_Bachelors_Attainment.png)</center>\n<br/>\n<center>![chris2](../03 Visualizations/Elementary_Spending_and_Bachelors_Attainment2.png)</center>\n\nTo recreate this Visualization, Drag 2014 PPCS onto Columns, State on to rows, and select a Bar graph.\nTo color and filter, create a calculated field on 2014 PPCS named \"PPCS to Avg\" with the following code:\n```{}\nIF SUM([2014 PPCS]) > WINDOW_AVG(SUM([2014 PPCS]))\n    THEN 'HIGH'\nELSE 'LOW'\n\nEND\n```\nand drag it to filters, then create a calculated field on Bachelors titled \"Relative_Bachelors\" using the following code:\n```{}\nIF [Bachelors] > 500000  * WATCH OUT FOR A TABLEAU ERROR IN WHICH BACHELORS IS MISSPELLED/MISLABELED - ADJUST ACCORDINGLY\n    THEN 'HIGH'\n\nELSE 'LOW'\n\nEND\n```\nand drag it to color. Finally, drag Bachelors to Label.\n\n\nThis following graph is a simple histograme representing the distribution of per pupil elementary school spending by state. Notice that the histogram is most dense around 8-10k per pupil.\n\n```{r eval=FALSE}\n       ggplot(df1) + geom_histogram(aes(x = `X2014.PPCS`, fill = I('dodgerblue4'), col=I('red'))) + \n      xlab('Per Child Spending') + \n      ylab('Bin of States') +\n      ggtitle('Per Pupil Spending Range')\n```\n\n<center>![chris3](../03 Visualizations/Per_Pupil_Spending_Range_HIST.png)</center>\n\nTo recreate this visualization in Tableau, simply click on Bachelors and choose Histogram view under 'show me'\n\nThis next bar graph displays the states along with their ratios of per pupil spending to bachelors attainment. While seemingly a curious choice for a ratio, it is effective in displaying what if any correlation there may be between state elementary spending and higher education attainment. The kpi used helps give a general notion of which states invest most heavily in elementary education and where it seems to pay off or not.\n\n```{r eval=FALSE}\n    ggplot(df1, aes(x=State,  y=kpi_bach_ratio, fill = kpi_bach_ratio)) + \n      geom_bar(stat='identity') + \n      theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+\n      ylab('Bachelor Attainment to Spending Ratio') + \n      ggtitle('KPI Bachelor Ratio Performance by State')\n```\n\n<center>![chris4](../03 Visualizations/State_Elementary_Spending_to_Higher_Ed_Ratios.png)</center>\n\nTo recreate this graph in tableau:\nCreate a calculated field on Bachelors named 'Higher_ed/Spending Ratio' using the following code:\n```{}\n[Higher_ED] / [2014 PPCS]\n```\nand drag it to rows. Drag State to Columns. Drag 'Higher_Ed/Spending Ratio' to color.\n\nThe following graph is a cross tabulation. Notice how most states above average median spending have a below average enrollment per population. These states spend more on their child and have less children in each state. Some interesting things to point out would be that big states such as California and Texas have a huge population and spends less on each children. In addition, another interesting thing would be how the state of utah is way below the median spending per child and it is above in terms of child enrollment over population. Furthermore, most of the northeastern states have an above median spending per child as compared to the southern states.\n```{r eval=FALSE}\nggplot(df) + geom_text(aes(x = Above_Median_SPC, y=State, label=Spending_Per_Child),size=3)+xlab(\"Above Median Spending Per Child\")+geom_tile(aes(x=Above_Median_SPC, y=State,fill=Elementary_Enrollment_Average), alpha=0.50)\n```\n\n<center>![ding1](../03 Visualizations/Cross_tab_spending_vs_enrollment_avg.png)</center>\n\nThe crosstab can be recreated in tableau by putting geographical area in the rows section and above median spending in the columns section. To the above median spending, find the median value for the states and create a calculated field that will give the true/false value if the number is above or beneath the median spending. Then, add the text Sum(Spending per child) in the text section underneath marks. Color the crosstab with Above Average Enrollment per state population by using a calculated field to determine the average enrollment per state population and then using another calculated field to determine the true/false value of each enrollment/population.\n\nThe following boxplot shows that the states that are below the median do not deviate too much from one another. However, the states that spend above the median have huge ranges. For instance, one of the biggest outliers is the district of columnbia which could be due to the small population of children vs. the amount of money in the region. \n\n```{r eval=FALSE}\ndf5 = data.frame(elementaryspending)\ndf5$Spending_Per_Child <- (df5$Total.Spending..in.thousands.*1000/df5$Elementary.secondary.enrollment)\n\ndf5$Above_Median_SPC <- df5$Spending_Per_Child > median(df5$Spending_Per_Child)\n\ndf5$Elementary_Enrollment_Average <- ifelse (df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.<=mean(df5$Elementary.secondary.enrollment/df5$State.population..in.thousands.),\"Below Average Enrollment per State Population\",\"Above Average Enrollment per State Population\")\n\nbox_plot <- ggplot() +geom_boxplot(aes(x= df5$Above_Median_SPC,y = df5$Spending_Per_Child)) + xlab(\"Above Median Spending Per Child\") + ylab(\"Spending Per Child\")\nprint(box_plot)\n\n```\n<center>![ding2](../03 Visualizations/boxplot_spending_per_child.png)</center>\n\nTo recreate in Tableau, first uncheck aggregate measures and drag the spending per child onto the rows section. Next, determine the median spending per child and create a calculated field that outputs a true/false value to determine the above median spending per child. Drag the above median spending per child to the columns section and on the show me click on the box pot diagram.\n\nThis final plot is a scatter plot that shows what could be a potential correlation between how much--on average--an individual in a state makes and how much that state invests in education per child. After further analysis though (r=.17), we can infer that there is no direct correlation between the two measures. \n\n```{r eval=FALSE}\nggplot(incomestuff, aes(x=Income, y=`2014 PPCS`)) + geom_point(shape=1) + geom_smooth(method=lm)+ scale_x_continuous(name=\"Income\", label=dollar)+scale_y_continuous(name=\"2014 PPCS\", label=dollar)\n```\n\n<center>![isaac](../03 Visualizations/isaac_scatter.png)</center>\n\nTo recreate this in Tableau, you will need to drag Income to Columns and 2014 PPCS to Rows. You can also add State to the labels mark in order to see the dots clearer. To add the line of regression, click Analysis at the top, click on Trends and add a trend line. \n\nTo see all of the above charts in action, please visit [this site](isaacgonzalez.shinyapps.io/final).\n\n",
    "created" : 1493706778352.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1112259594",
    "id" : "8667377E",
    "lastKnownWriteTime" : 1493707047,
    "last_content_update" : 1493707047208,
    "path" : "~/DataVisualization/Final/00 Doc/final.Rmd",
    "project_path" : "00 Doc/final.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}