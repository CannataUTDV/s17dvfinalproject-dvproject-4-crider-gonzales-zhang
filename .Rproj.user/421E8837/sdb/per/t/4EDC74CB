{
    "collab_server" : "",
    "contents" : "require(dplyr)\nrequire(data.world)\n#-----------------------FILE ONE------------------------------------------\n\ndf1 <- query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"chriscrider/s-17-edv-project-3\", type=\"sql\",\n  query = \"SELECT * FROM ElementarySpending join `acs-2015-5-e-education-QueryResult` \n  on (ElementarySpending.State = `acs-2015-5-e-education-QueryResult`.AreaName)\"\n) \n\n\ndf <- df1\nnames(df)\nstr(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.\n\n\ndimensions <- c(\"State\", \"AreaName\")\n\nmeasures <-  setdiff(names(df), dimensions)\n\n\n# Get rid of special characters in each column.\n# Google ASCII Table to understand the following:\nfor(n in names(df)) {\n  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n}\n\nstr(df)\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\nna2emptyString <- function (x) {\n  x[is.na(x)] <- \"\"\n  return(x)\n}\nif( length(dimensions) > 0) {\n  for(d in dimensions) {\n    # Change NA to the empty string.\n    df[d] <- data.frame(lapply(df[d], na2emptyString))\n    # Get rid of \" and ' in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n    # Change & to and in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n    # Change : to ; in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n  }\n}\n\nna2zero <- function (x) {\n  x[is.na(x)] <- 0\n  return(x)\n}\n# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.\nif( length(measures) > 1) {\n  for(m in measures) {\n    print(m)\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n    df[m] <- data.frame(lapply(df[m], na2zero))\n    df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))\n # This is needed to turn measures back to numeric because gsub turns them into strings.\n  }\n}\n\neducation <- df\n\nstr(education)\n\n\n#-----------------------FILE TWO----------------------------------------\n\n\ndf2 <- query(\n  data.world(propsfile =\"www/.data.world\"),\n  dataset=\"chriscrider/s-17-dv-project-5/\", type=\"sql\",\n  query = \"SELECT * FROM `SchoolSpending.csv/SchoolSpending` as elementaryspending join `PopulationandElementaryEnrollment` as population on(`SchoolSpending`.State = `PopulationandElementaryEnrollment` .State)\")\n\n\ndf <- df2\nnames(df)\nstr(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.\n\n\ndimensions <- c(\"State\", \"State_1\")\n\nmeasures <-  setdiff(names(df), dimensions)\n\n\n# Get rid of special characters in each column.\n# Google ASCII Table to understand the following:\nfor(n in names(df)) {\n  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n}\n\nstr(df)\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\nna2emptyString <- function (x) {\n  x[is.na(x)] <- \"\"\n  return(x)\n}\nif( length(dimensions) > 0) {\n  for(d in dimensions) {\n    # Change NA to the empty string.\n    df[d] <- data.frame(lapply(df[d], na2emptyString))\n    # Get rid of \" and ' in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n    # Change & to and in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n    # Change : to ; in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n  }\n}\n\nna2zero <- function (x) {\n  x[is.na(x)] <- 0\n  return(x)\n}\n# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.\nif( length(measures) > 1) {\n  for(m in measures) {\n    print(m)\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n    df[m] <- data.frame(lapply(df[m], na2zero))\n    df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))\n    # This is needed to turn measures back to numeric because gsub turns them into strings.\n  }\n}\n\nelementaryspending <- df\n\nstr(elementaryspending)\n#-----------------------FILE THREE----------------------------------------\n\n\ndataframee <- query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"chriscrider/s-17-edv-project-3\", type=\"sql\",\n  query = \"SELECT *\n  FROM Pupil_Per_Spending join USA_All_States_Income on (Pupil_Per_Spending.`Abbreviation:`=USA_All_States_Income.State)\"\n  \n) \n\n\ndf <- dataframee\nnames(df)\nstr(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.\n\ndimensions <- c(\"Geographic area\", \"State\", \"Abbreviation:\", \"Race\")\n\nmeasures <- setdiff(names(df), dimensions)\n\n\n\n# Get rid of special characters in each column.\n# Google ASCII Table to understand the following:\nfor(n in names(df)) {\n  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n}\n\nstr(df)\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\nna2emptyString <- function (x) {\n  x[is.na(x)] <- \"\"\n  return(x)\n}\nif( length(dimensions) > 0) {\n  for(d in dimensions) {\n    # Change NA to the empty string.\n    df[d] <- data.frame(lapply(df[d], na2emptyString))\n    # Get rid of \" and ' in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n    # Change & to and in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n    # Change : to ; in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n  }\n}\n\nna2zero <- function (x) {\n  x[is.na(x)] <- 0\n  return(x)\n}\n# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.\nif( length(measures) > 1) {\n  for(m in measures) {\n    print(m)\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n    df[m] <- data.frame(lapply(df[m], na2zero))\n    df[m] <- lapply(df[m], function(x) as.numeric(as.character(x)))\n    # This is needed to turn measures back to numeric because gsub turns them into strings.\n  }\n}\n\nincomestuff <- df\n\n\n\n",
    "created" : 1493689211856.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4292469485",
    "id" : "4EDC74CB",
    "lastKnownWriteTime" : 1493701501,
    "last_content_update" : 1493701501066,
    "path" : "~/DataVisualization/Final/02 Shiny/www/R_ETL.R",
    "project_path" : "02 Shiny/www/R_ETL.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}